<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="redlib.backend.dao.LogMapper">
  <resultMap id="BaseResultMap" type="redlib.backend.model.Log">
    <id column="log_id" jdbcType="INTEGER" property="logId" />
    <result column="member_id" jdbcType="INTEGER" property="memberId" />
    <result column="change_flag" jdbcType="VARCHAR" property="changeFlag" />
    <result column="service_project_id" jdbcType="INTEGER" property="serviceProjectId" />
    <result column="project_name" jdbcType="VARCHAR" property="projectName" />
    <result column="change_amount" jdbcType="DECIMAL" property="changeAmount" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="change_date" jdbcType="TIMESTAMP" property="changeDate" />
  </resultMap>
  <sql id="Base_Column_List">
    log_id, member_id, change_flag, service_project_id,project_name, change_amount, remark, change_date
  </sql>
  <!-- 查找日志ByID -->
  <select id="findLogById" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    SELECT
    <include refid="Base_Column_List" />
    FROM
    balance_change_log
    WHERE
    log_id = #{logId}
  </select>

  <!-- 删除日志ByID -->
  <delete id="deleteLogById" parameterType="java.lang.Integer">
    DELETE FROM
      balance_change_log
    WHERE
      log_id = #{logId}
  </delete>

  <insert id="insertSelective" parameterType="redlib.backend.model.Log">
    insert into balance_change_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="logId != null">
        log_id,
      </if>
      <if test="memberId != null">
        member_id,
      </if>
      <if test="changeFlag != null">
        change_flag,
      </if>
      <if test="serviceProjectId != null">
        service_project_id,
      </if>
      <if test="projectName != null">
        project_name,
      </if>
      <if test="changeAmount != null">
        change_amount,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="changeDate != null">
        change_date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="logId != null">
        #{logId,jdbcType=INTEGER},
      </if>
      <if test="memberId != null">
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="changeFlag != null">
        #{changeFlag,jdbcType=VARCHAR},
      </if>
      <if test="serviceProjectId != null">
        #{serviceProjectId,jdbcType=INTEGER},
      </if>
      <if test="projectName != null">
        #{projectName,jdbcType=VARCHAR},
      </if>
      <if test="changeAmount != null">
        #{changeAmount,jdbcType=DECIMAL},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="changeDate != null">
        #{changeDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>



  <select id="findLastConsumeLogByMemberIdAndProjectId" resultMap="BaseResultMap">
    SELECT * FROM balance_change_log
    WHERE member_id = #{memberId}
      AND service_project_id = #{serviceProjectId}
      AND change_flag = '消费'
    ORDER BY change_date DESC
    LIMIT 1
  </select>

  <select id="findLastRechargeLogByMemberId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    SELECT * FROM balance_change_log
    WHERE member_id = #{memberId,jdbcType=INTEGER}
      AND change_flag = '消费'
      OR change_flag = '充值'
    ORDER BY change_date DESC
    LIMIT 1
  </select>

  <!-- 在LogMapper.xml中添加查找最后一次财务变动记录的查询 -->
  <select id="findLastFinancialChange" resultMap="BaseResultMap">
    SELECT * FROM balance_change_log
    ORDER BY change_date DESC
    LIMIT 1
  </select>
  <!--查询（分页）-->
  <select id="list" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from balance_change_log
    <where>
      <if test="queryDTO.logId != null">
        and log_id=#{queryDTO.logId}
      </if>
      <if test="queryDTO.memberId != null">
        and member_id=#{queryDTO.memberId}
      </if>
      <if test="queryDTO.changeDate != null">
        and date(change_date)=date(#{queryDTO.changeDate})
      </if>
    </where>
    <if test="queryDTO.orderBy != null">
      order by ${queryDTO.orderBy}
    </if>

    limit #{offset}, #{limit}
  </select>

  <!--查询订单列表（分页）命中个数-->
  <select id="count" resultType="integer">
    select count(*) from balance_change_log
    <where>
      <if test="queryDTO.logId != null">
        and log_id=#{queryDTO.logId}
      </if>
      <if test="queryDTO.memberId != null">
        and member_id=#{queryDTO.memberId}
      </if>
      <if test="queryDTO.changeDate != null">
        and date(change_date)=date(#{queryDTO.changeDate})
      </if>
    </where>
  </select>

  <select id="calculateMonthlyProfitByYear" parameterType="java.lang.Integer" resultType="redlib.backend.model.MonthlyProfit">
    SELECT
      EXTRACT(MONTH FROM change_date) AS "month",
      SUM(
              CASE
                WHEN change_flag IN ('充值', '开通会员', '撤销充值') THEN change_amount
                WHEN change_flag IN ('非会员消费', '撤销非会员消费') THEN -change_amount
                ELSE 0
                END
        ) AS "profit"
    FROM balance_change_log
    WHERE EXTRACT(YEAR FROM change_date) = #{year}
    GROUP BY EXTRACT(MONTH FROM change_date)
    ORDER BY month
  </select>

  <select id="yearProfit" parameterType="java.lang.Integer" resultType="java.lang.Integer">
    SELECT
      SUM(
              CASE
                WHEN change_flag IN ('充值', '开通会员', '撤销充值') THEN change_amount
                WHEN change_flag IN ('非会员消费', '撤销非会员消费') THEN -change_amount
                ELSE 0
                END
        ) AS totalProfit
    FROM balance_change_log
    WHERE EXTRACT(YEAR FROM change_date) = #{year}
  </select>

  <select id="calculateDailyProfitBetweenDates" parameterType="map" resultType="map">
    SELECT
      DATE(change_date) AS date,
      SUM(
              CASE
                WHEN change_flag IN ('充值', '开通会员', '撤销充值') THEN change_amount
                WHEN change_flag IN ('非会员消费', '撤销非会员消费') THEN -change_amount
                ELSE 0
                END
        ) AS profit
    FROM balance_change_log
    WHERE change_date BETWEEN #{startDate} AND DATE_ADD(#{endDate}, INTERVAL 1 DAY)
    GROUP BY DATE(change_date)
    ORDER BY DATE(change_date)
  </select>

  <select id="calculateTotalProfitBetweenDates" parameterType="map" resultType="java.lang.Double">
    SELECT
      SUM(
              CASE
                WHEN change_flag IN ('充值', '开通会员', '撤销充值') THEN change_amount
                WHEN change_flag IN ('非会员消费', '撤销非会员消费') THEN -change_amount
                ELSE 0
                END
        ) AS totalProfit
    FROM balance_change_log
    WHERE change_date BETWEEN #{startDate} AND DATE_ADD(#{endDate}, INTERVAL 1 DAY)
  </select>

  <select id="calculateAllProfitByBarberNameAndDateRange" parameterType="map" resultType="java.lang.Double">
    SELECT
      SUM(
              CASE
                WHEN change_flag IN ('非会员消费', '消费', '撤销非会员消费','撤销消费') THEN -change_amount
                ELSE 0
                END
        ) AS totalProfit
    FROM balance_change_log
    WHERE project_name LIKE CONCAT('%[', #{barberName}, ']%')
      AND change_date BETWEEN #{startDate} AND DATE_ADD(#{endDate}, INTERVAL 1 DAY)
  </select>

  <select id="calculateProfitByBarberNameAndDateRange" parameterType="map" resultType="map">
    SELECT
      DATE(change_date) AS profitDate,
      SUM(
              CASE
                WHEN change_flag IN ('非会员消费', '消费', '撤销非会员消费', '撤销消费') THEN -change_amount
                ELSE 0
                END
        ) AS dailyProfit
    FROM balance_change_log
    WHERE project_name LIKE CONCAT('%[', #{barberName}, ']%')
      AND change_date BETWEEN #{startDate} AND DATE_ADD(#{endDate}, INTERVAL 1 DAY)
    GROUP BY DATE(change_date)
    ORDER BY DATE(change_date)
  </select>

</mapper>